// The Interface for the Sight service.

syntax = "proto3";

package sight.x.service;

import "sight/proto/sight.proto";
import "service/numproto/protobuf/ndarray.proto";


// This API manages Sight logs, their creation and access to them.
service SightService {
  // A test request to validate that the service is up.
  rpc Test(TestRequest) returns (TestResponse) {}

  rpc PrintInsertionTime(TestRequest) returns (TestResponse) {}

  // Creates a new Sight log.
  rpc Create(CreateRequest) returns (CreateResponse) {}

  rpc Launch(LaunchRequest) returns (LaunchResponse) {}

  rpc GetWeights(GetWeightsRequest) returns (GetWeightsResponse) {}

  rpc DecisionPoint(DecisionPointRequest) returns (DecisionPointResponse) {}

  // rpc DecisionOutcome(DecisionOutcomeRequest)
  //     returns (DecisionOutcomeResponse) {}

  rpc CopyDataToReplayServer(CopyDataToReplayServerRequest) returns (CopyDataToReplayServerResponse) {}

  rpc CurrentStatus(CurrentStatusRequest) returns (CurrentStatusResponse) {}

  rpc FetchOptimalAction(FetchOptimalActionRequest) returns (FetchOptimalActionResponse) {}

  rpc ProposeAction(ProposeActionRequest) returns (ProposeActionResponse) {}

  rpc FinalizeEpisode(FinalizeEpisodeRequest)
      returns (FinalizeEpisodeResponse) {}
}

message CopyDataToReplayServerRequest {
  string client_id = 1;
  string worker_id = 2;
  numproto.protobuf.NDArray observation = 3;
  numproto.protobuf.NDArray action = 4;
  numproto.protobuf.NDArray reward = 5;
  numproto.protobuf.NDArray discount = 6;
  numproto.protobuf.NDArray next_observation = 7;
}

message CopyDataToReplayServerResponse {
  string response_str = 1;
}

// message AddObsRequest {
//   enum StepType{
//     DEFAULT = 0;
//     FIRST = 1;
//     MID = 2;
//     LAST = 3;
//   }
//   message Observation{
//     numproto.protobuf.NDArray action = 1;
//     StepType steptype = 2;
//     numproto.protobuf.NDArray reward = 3;
//     numproto.protobuf.NDArray discount = 4;
//     numproto.protobuf.NDArray observation = 5;
//   }
//   string client_id = 1;
//   repeated Observation episode_observations = 2;
// }

// message AddObsResponse {
//   string response_str = 1;
// }

message GetWeightsRequest {
  enum StepType{
    DEFAULT = 0;
    FIRST = 1;
    MID = 2;
    LAST = 3;
  }
  message Observation{
    numproto.protobuf.NDArray action = 1;
    StepType steptype = 2;
    numproto.protobuf.NDArray reward = 3;
    numproto.protobuf.NDArray discount = 4;
    numproto.protobuf.NDArray observation = 5;
  }
  string client_id = 1;
  string worker_id = 2;
  repeated Observation episode_observations = 3;
}

message GetWeightsResponse {
  message Layer {
    message WeightsData {
        repeated float b = 1;
        // repeated float w = 2;
        // NDArray b = 1;
        numproto.protobuf.NDArray w = 2;
    }
    string name = 1;
    WeightsData weights = 2;
  }
  repeated Layer layers = 1;
}

message Acme_Request {
  enum StepType{
    DEFAULT = 0;
    FIRST = 1;
    MID = 2;
    LAST = 3;
  }
  message Observation{
    numproto.protobuf.NDArray action = 1;
    StepType steptype = 2;
    numproto.protobuf.NDArray reward = 3;
    numproto.protobuf.NDArray discount = 4;
    numproto.protobuf.NDArray observation = 5;
  }
  string client_id = 1;
  string worker_id = 2;
  repeated Observation episode_observations = 3;
}

message Acme_Response {
  message Layer {
    message WeightsData {
        repeated float b = 1;
        numproto.protobuf.NDArray w = 2;
    }
    string name = 1;
    WeightsData weights = 2;
  }
  repeated Layer layers = 1;
}

message DecisionPointRequest {
  string client_id = 1;
  string worker_id = 2;
  sight.x.proto.DecisionPoint decision_point = 3;
  sight.x.proto.DecisionOutcome decision_outcome = 4;
  Acme_Request acme_decision_point = 5;
}

message DecisionPointResponse {
  repeated sight.x.proto.DecisionParam action = 1;
  Acme_Response acme_response = 2;
}

// message DecisionOutcomeRequest {
//   sight.x.proto.DecisionOutcome decision_outcome = 1;
//   string client_id = 3;
//   string worker_id = 4;
//   float last_reward = 5;
//   OptimizerType optimizer_type = 6;
//   bool last_call = 7;
// }

// message DecisionOutcomeResponse {
//   string response_str = 1;
// }

message FetchOptimalActionRequest {
  string client_id = 1;
  string worker_id = 2;
}

message FetchOptimalActionResponse {
  string response_str = 1;
}

message CurrentStatusRequest {
  string client_id = 1;
  string worker_id = 2;
}

message CurrentStatusResponse {
  string response_str = 1;
}

message LaunchRequest {
  sight.x.proto.DecisionConfigurationStart decision_config_params = 1;
  string label = 3;
  string client_id = 4;
}

message LaunchResponse {
  string display_string = 1;
}

message ProposeActionRequest {
  string client_id = 1;
  string worker_id = 2;
  map<string, float> action = 3;
  sight.x.proto.DecisionOutcome outcome = 4;
}

message ProposeActionResponse {
  string response_str = 1;
}

message FinalizeEpisodeRequest {
  string client_id = 1;
  string worker_id = 2;
  sight.x.proto.DecisionPoint decision_point = 3;
  sight.x.proto.DecisionOutcome decision_outcome = 4;
  sight.x.proto.DecisionConfigurationStart.OptimizerType optimizer_type = 5;
}

message FinalizeEpisodeResponse {
  string response_str = 1;
  bool stop_worker = 2;
}

message TestRequest {
  string client_id = 1;
}

message TestResponse {
  string val = 1;
}

// The format in which the log is stored.
enum LogFormat {
  LF_UNKNOWN = 0;

  // ColumnIO (go/columnio) in CNS.
  LF_COLUMNIO = 1;

  // Capacitor (go/capacitor) in CNS.
  LF_CAPACITOR = 2;

  // Spanner (go/spanner)
  LF_SPANNER = 3;

  // AVRO
  LF_AVRO = 4;
}

// Request message for SightService.Create.
message CreateRequest {
  // The format in which the log data is stored.
  LogFormat format = 1;

  // The path of the directory where log files are stored.
  string log_dir_path = 2;

  // The user or group that owns this log data.
  string log_owner = 3;

  // Meaningful label that describes the contents of the log to a human.
  string label = 4;

  // Attributes that describe this log.
  repeated sight.x.proto.Attribute attribute = 5;
}

// Response message for SightService.Create.
message CreateResponse {
  // The unique id of the created log.
  int64 id = 1;

  // The path prefix common to all the file(s) that hold the log.
  string path_prefix = 2;
}
